/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface components {
  schemas: {
    Query: {
      /** Control what fields are being returned in the object. */
      fields?: string[];
      filter?: { [key: string]: any };
      /** Filter by items that contain the given search query in one of their fields. */
      search?: string;
      /** How to sort the returned items. */
      sort?: string[];
      /** Set the maximum number of items that will be returned */
      limit?: number;
      /** How many items to skip when fetching data. */
      offset?: number;
      /** Cursor for use in pagination. Often used in combination with limit. */
      page?: number;
      /** Deep allows you to set any of the other query parameters on a nested relational dataset. */
      deep?: { [key: string]: any };
    };
    "x-metadata": {
      /** Returns the total item count of the collection you're querying. */
      total_count?: number;
      /** Returns the item count of the collection you're querying, taking the current filter/search parameters into account. */
      filter_count?: number;
    };
    ItemsAdmin: { [key: string]: any };
    ItemsBranches: {
      code?: string;
      date_created?: string | null;
      date_updated?: string | null;
      direction?: string | null;
      name?: string | null;
      sort?: number | null;
      status?: string | null;
      user_created?: string | null;
      user_updated?: string | null;
    };
    ItemsCatalog: { [key: string]: any };
    ItemsCataloging: { [key: string]: any };
    ItemsCollections: {
      active?: boolean | null;
      allowOffline?: boolean | null;
      date_created?: string | null;
      date_updated?: string | null;
      end?: string | null;
      id?: string;
      slug?: string | null;
      sort?: number | null;
      start?: string | null;
      status?: string | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      categories?: { [key: string]: any } | null;
      name?: string | null;
      contents?: (
        | number
        | components["schemas"]["ItemsCollectionsProductVariants"]
      )[];
      publishers?: (
        | number
        | components["schemas"]["ItemsCollectionsPublishers"]
      )[];
      tags?: (number | components["schemas"]["ItemsCollectionsTags"])[];
      licenses?: (string | components["schemas"]["ItemsLicenseCollections"])[];
    };
    ItemsCollectionsProductVariants: {
      collections_id?:
        | (string | components["schemas"]["ItemsCollections"])
        | null;
      id?: number;
      productVariants_id?:
        | (string | components["schemas"]["ItemsProductVariants"])
        | null;
    };
    ItemsCollectionsPublishers: {
      collections_id?:
        | (string | components["schemas"]["ItemsCollections"])
        | null;
      id?: number;
      publishers_id?:
        | (string | components["schemas"]["ItemsPublishers"])
        | null;
    };
    ItemsCollectionsTags: {
      collections_id?:
        | (string | components["schemas"]["ItemsCollections"])
        | null;
      id?: number;
      tags_id?: (string | components["schemas"]["ItemsTags"]) | null;
    };
    ItemsConfig: {
      date_updated?: string | null;
      id?: string;
      user_updated?: (string | components["schemas"]["Users"]) | null;
    };
    ItemsDrm: { [key: string]: any };
    ItemsECommerceLites: {
      date_created?: string | null;
      date_updated?: string | null;
      domain?: string | null;
      id?: string;
      logo?: (string | components["schemas"]["Files"]) | null;
      sort?: number | null;
      status?: string | null;
      token?: string | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      name?: string | null;
      purchases?: (string | components["schemas"]["ItemsECommercePurchases"])[];
    };
    ItemsECommercePurchases: {
      content?: (string | components["schemas"]["ItemsProductVariants"]) | null;
      date?: string | null;
      date_created?: string | null;
      date_updated?: string | null;
      eCommerce?:
        | (string | components["schemas"]["ItemsECommerceLites"])
        | null;
      id?: string;
      sort?: number | null;
      status?: string | null;
      user?: (string | components["schemas"]["Users"]) | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
    };
    ItemsEcommerce: { [key: string]: any };
    ItemsExecutions: {
      date?: string | null;
      date_created?: string | null;
      date_updated?: string | null;
      id?: string;
      process?: (string | components["schemas"]["ItemsProcesses"]) | null;
      progress?: number | null;
      sort?: number | null;
      status?: string | null;
      user?: (string | components["schemas"]["Users"]) | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
    };
    ItemsInstitutionUsers: {
      date_created?: string | null;
      date_updated?: string | null;
      id?: string;
      institution?:
        | (string | components["schemas"]["ItemsInstitutions"])
        | null;
      role?: string | null;
      sort?: number | null;
      status?: string | null;
      user?: (string | components["schemas"]["Users"]) | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
    };
    ItemsInstitutions: {
      accessToApp?: boolean | null;
      backToBookshelf?: boolean | null;
      date_created?: string | null;
      date_updated?: string | null;
      details?: string | null;
      externalId?: string | null;
      id?: string;
      image?: (string | components["schemas"]["Files"]) | null;
      ipsAndIpRanges?: { [key: string]: any } | null;
      login?: boolean | null;
      primaryColor?: string | null;
      referrerUrl?: { [key: string]: any } | null;
      secondaryColor?: string | null;
      slug?: string | null;
      sort?: number | null;
      status?: string | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      worksAccessPercentage?: number | null;
      name?: string | null;
      documents?: (number | components["schemas"]["ItemsInstitutionsFiles"])[];
      licenses?: (string | components["schemas"]["ItemsLicenses"])[];
    };
    ItemsInstitutionsFiles: {
      directus_files_id?: (string | components["schemas"]["Files"]) | null;
      id?: number;
      institutions_id?:
        | (string | components["schemas"]["ItemsInstitutions"])
        | null;
    };
    ItemsLicenseCollections: {
      id?: string;
      status?: string | null;
      sort?: number | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      date_created?: string | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      date_updated?: string | null;
      license?: (string | components["schemas"]["ItemsLicenses"]) | null;
      collection?: (string | components["schemas"]["ItemsCollections"]) | null;
      contentAvailable?: string | null;
      percentage?: number | null;
      sampleStart?: number | null;
      sampleEnd?: number | null;
    };
    ItemsLicenseContents: {
      contentAvailable?: string | null;
      date_created?: string | null;
      date_updated?: string | null;
      id?: string;
      percentage?: number | null;
      sampleEnd?: number | null;
      sampleStart?: number | null;
      sort?: number | null;
      status?: string;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      license?: (string | components["schemas"]["ItemsLicenses"]) | null;
      content?: (string | components["schemas"]["ItemsProductVariants"]) | null;
    };
    ItemsLicenses: {
      accessToApp?: boolean | null;
      concurrency?: number | null;
      contentAvailable?: string | null;
      date_created?: string | null;
      date_updated?: string | null;
      demoDuration?: number | null;
      externalId?: string | null;
      id?: string;
      institution?:
        | (string | components["schemas"]["ItemsInstitutions"])
        | null;
      licenseEnd?: string | null;
      licenseStart?: string | null;
      percentage?: number | null;
      sampleEnd?: number | null;
      sampleStart?: number | null;
      sort?: number | null;
      status?: string | null;
      type?: string | null;
      user?: (string | components["schemas"]["Users"]) | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      backToBookshelf?: boolean | null;
      collections?: (
        | string
        | components["schemas"]["ItemsLicenseCollections"]
      )[];
      contents?: (string | components["schemas"]["ItemsLicenseContents"])[];
      contentAvailableGroup?: string;
      duration?: string;
    };
    ItemsParticipants: {
      date_created?: string | null;
      date_updated?: string | null;
      firstName?: string | null;
      id?: string;
      lastName?: string | null;
      slug?: string | null;
      sort?: number | null;
      status?: string | null;
      user?: (string | components["schemas"]["Users"]) | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
    };
    ItemsProcesses: {
      allowManual?: boolean | null;
      cron?: string | null;
      date_created?: string | null;
      date_updated?: string | null;
      id?: string;
      process?: string | null;
      slug?: string | null;
      sort?: number | null;
      status?: string | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      executions?: (string | components["schemas"]["ItemsExecutions"])[];
    };
    ItemsProductCategories: {
      date_created?: string | null;
      date_updated?: string | null;
      defaultName?: string;
      id?: string;
      slug?: string | null;
      sort?: number | null;
      status?: string | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      parent?:
        | (string | components["schemas"]["ItemsProductCategories"])
        | null;
      branchDetails?: (
        | number
        | components["schemas"]["ItemsProductCategoriesTranslations"]
      )[];
      categories?: (string | components["schemas"]["ItemsProductCategories"])[];
    };
    ItemsProductCategoriesTranslations: {
      branches_code?: (string | components["schemas"]["ItemsBranches"]) | null;
      description?: string | null;
      id?: number;
      name?: string | null;
      productCategories_id?:
        | (string | components["schemas"]["ItemsProductCategories"])
        | null;
    };
    ItemsProductTypes: {
      date_created?: string | null;
      date_updated?: string | null;
      discriminatoryFields?: { [key: string]: any } | null;
      id?: string;
      name?: string | null;
      sort?: number | null;
      status?: string | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      products?: (string | components["schemas"]["ItemsProducts"])[];
    };
    ItemsProductVariants: {
      date_created?: string | null;
      date_updated?: string | null;
      format?: string;
      id?: string;
      isbn?: string;
      product?: string | components["schemas"]["ItemsProducts"];
      sort?: number | null;
      status?: string | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      branchDetails?: (
        | number
        | components["schemas"]["ItemsProductVariantsTranslations"]
      )[];
      licenses?: (string | components["schemas"]["ItemsLicenseContents"])[];
    };
    ItemsProductVariantsTranslations: {
      branches_code?: (string | components["schemas"]["ItemsBranches"]) | null;
      description?: string | null;
      id?: number;
      name?: string | null;
      productVariants_id?:
        | (string | components["schemas"]["ItemsProductVariants"])
        | null;
    };
    ItemsProducts: {
      date_created?: string | null;
      date_updated?: string | null;
      id?: string;
      productType?: string | components["schemas"]["ItemsProductTypes"];
      publisher?: (string | components["schemas"]["ItemsPublishers"]) | null;
      slug?: string | null;
      sort?: number | null;
      status?: string | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      categories?: { [key: string]: any } | null;
      name?: string | null;
      branchDetails?: (
        | number
        | components["schemas"]["ItemsProductsTranslations"]
      )[];
      tags?: (number | components["schemas"]["ItemsProductsTags"])[];
      variants?: (string | components["schemas"]["ItemsProductVariants"])[];
      participants?: (
        | string
        | components["schemas"]["ItemsProductsParticipants"]
      )[];
    };
    ItemsProductsParticipants: {
      date_created?: string | null;
      date_updated?: string | null;
      id?: string;
      participant?:
        | (string | components["schemas"]["ItemsParticipants"])
        | null;
      product?: (string | components["schemas"]["ItemsProducts"]) | null;
      sort?: number | null;
      status?: string | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      role?: (string | components["schemas"]["ItemsRoles"]) | null;
    };
    ItemsProductsTags: {
      id?: number;
      products_id?: (string | components["schemas"]["ItemsProducts"]) | null;
      tags_id?: (string | components["schemas"]["ItemsTags"]) | null;
    };
    ItemsProductsTranslations: {
      basePrice?: number;
      branches_id?: (string | components["schemas"]["ItemsBranches"]) | null;
      description?: string | null;
      id?: number;
      name?: string | null;
      products_id?: (string | components["schemas"]["ItemsProducts"]) | null;
      taxMultiplier?: number | null;
    };
    ItemsPublishers: {
      date_created?: string | null;
      date_updated?: string | null;
      id?: string;
      slug?: string | null;
      sort?: number | null;
      status?: string | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      name?: string | null;
      externalId?: string | null;
      lastSync?: string | null;
      products?: (string | components["schemas"]["ItemsProducts"])[];
    };
    ItemsRoles: {
      id?: string;
      status?: string;
      sort?: number | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      date_created?: string | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      date_updated?: string | null;
      slug?: string | null;
      name?: string | null;
    };
    ItemsSystem: { [key: string]: any };
    ItemsTags: {
      date_created?: string | null;
      date_updated?: string | null;
      id?: string;
      slug?: string | null;
      sort?: number | null;
      status?: string | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      name?: string | null;
    };
    ItemsTranslations: {
      content?: string | null;
      date_created?: string | null;
      date_updated?: string | null;
      id?: string;
      image?: (string | components["schemas"]["Files"]) | null;
      key?: string | null;
      section?: string | null;
      sort?: number | null;
      status?: string | null;
      text?: string | null;
      type?: string | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      title?: string | null;
    };
    ItemsTreeConnections: {
      date_created?: string | null;
      date_updated?: string | null;
      /** $t:fieldToConnectNote */
      fieldToConnect?: { [key: string]: any } | null;
      id?: string;
      /** $t:originTableNote */
      originTable?: string | null;
      /** $t:parentFieldNote */
      parentField?: string | null;
      sort?: number | null;
      status?: string | null;
      /** $t:titlePatternNote */
      titlePattern?: string | null;
      /** $t:treeKeyNote */
      treeKey?: string | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
    };
    ItemsViewer: { [key: string]: any };
    Activity: {
      /** Unique identifier for the object. */
      id?: number;
      /** Action that was performed. */
      action?: "create" | "update" | "delete" | "login";
      /** The user who performed this action. */
      user?: (string | components["schemas"]["Users"]) | null;
      /** When the action happened. */
      timestamp?: string;
      /** The IP address of the user at the time the action took place. */
      ip?: string;
      /** User agent string of the browser the user used when the action took place. */
      user_agent?: string;
      /** Collection identifier in which the item resides. */
      collection?: string | components["schemas"]["Collections"];
      /** Unique identifier for the item the action applied to. This is always a string, even for integer primary keys. */
      item?: string;
      /** User comment. This will store the comments that show up in the right sidebar of the item edit page in the admin app. */
      comment?: string | null;
      /** Origin of the request when the action took place. */
      origin?: string;
      revisions?: (number | components["schemas"]["Revisions"])[];
    };
    Collections: {
      /** The collection key. */
      collection?: string;
      icon?: string | null;
      note?: string | null;
      display_template?: string | null;
      hidden?: boolean;
      singleton?: boolean;
      translations?: { [key: string]: any } | null;
      archive_field?: string | null;
      archive_app_filter?: boolean;
      archive_value?: string | null;
      unarchive_value?: string | null;
      sort_field?: string | null;
      accountability?: string | null;
      color?: string | null;
      item_duplication_fields?: { [key: string]: any } | null;
      sort?: number | null;
      group?: (string | components["schemas"]["Collections"]) | null;
      collapse?: string;
      collection_divider?: string;
      archive_divider?: string;
      sort_divider?: string;
      accountability_divider?: string;
      duplication_divider?: string;
    };
    Fields: {
      id?: number;
      /** Unique name of the collection this field is in. */
      collection?: string;
      /** Unique name of the field. Field name is unique within the collection. */
      field?: string;
      special?: string[] | null;
      interface?: string | null;
      options?: { [key: string]: any } | null;
      display?: string | null;
      display_options?: { [key: string]: any } | null;
      readonly?: boolean;
      hidden?: boolean;
      sort?: number | null;
      width?: string | null;
      translations?: { [key: string]: any } | null;
      note?: string | null;
      conditions?: { [key: string]: any } | null;
      required?: boolean | null;
      group?: (number | components["schemas"]["Fields"]) | null;
      validation?: { [key: string]: any } | null;
      validation_message?: string | null;
    };
    Files: {
      /** Unique identifier for the file. */
      id?: string;
      /** Where the file is stored. Either `local` for the local filesystem or the name of the storage adapter (for example `s3`). */
      storage?: string;
      /** Name of the file on disk. By default, Directus uses a random hash for the filename. */
      filename_disk?: string;
      /** How you want to the file to be named when it's being downloaded. */
      filename_download?: string;
      /** Title for the file. Is extracted from the filename on upload, but can be edited by the user. */
      title?: string;
      /** MIME type of the file. */
      type?: string;
      /** Virtual folder where this file resides in. */
      folder?: (string | components["schemas"]["Folders"]) | null;
      /** Who uploaded the file. */
      uploaded_by?: string | components["schemas"]["Users"];
      /** When the file was uploaded. */
      uploaded_on?: string;
      modified_by?: (string | components["schemas"]["Users"]) | null;
      modified_on?: string;
      /** Character set of the file. */
      charset?: string | null;
      /** Size of the file in bytes. */
      filesize?: number;
      /** Width of the file in pixels. Only applies to images. */
      width?: number | null;
      /** Height of the file in pixels. Only applies to images. */
      height?: number | null;
      /** Duration of the file in seconds. Only applies to audio and video. */
      duration?: number | null;
      /** Where the file was embedded from. */
      embed?: string | null;
      /** Description for the file. */
      description?: string | null;
      /** Where the file was created. Is automatically populated based on EXIF data for images. */
      location?: string | null;
      /** Tags for the file. Is automatically populated based on EXIF data for images. */
      tags?: string[] | null;
      /** IPTC, EXIF, and ICC metadata extracted from file */
      metadata?: { [key: string]: any } | null;
      storage_divider?: string;
    };
    Folders: {
      /** Unique identifier for the folder. */
      id?: string;
      /** Name of the folder. */
      name?: string;
      /** Unique identifier of the parent folder. This allows for nested folders. */
      parent?: (string | components["schemas"]["Folders"]) | null;
    };
    Permissions: {
      /** Unique identifier for the permission. */
      id?: number;
      /** Unique identifier of the role this permission applies to. */
      role?: string | null;
      /** What collection this permission applies to. */
      collection?: string;
      /** What action this permission applies to. */
      action?: "create" | "read" | "update" | "delete";
      /** JSON structure containing the permissions checks for this permission. */
      permissions?: { [key: string]: any } | null;
      /** JSON structure containing the validation checks for this permission. */
      validation?: { [key: string]: any } | null;
      /** JSON structure containing the preset value for created/updated items. */
      presets?: { [key: string]: any } | null;
      /** CSV of fields that the user is allowed to interact with. */
      fields?: string[] | null;
    };
    Presets: {
      /** Unique identifier for this single collection preset. */
      id?: number;
      /** Name for the bookmark. If this is set, the preset will be considered a bookmark. */
      bookmark?: string | null;
      /** The unique identifier of the user to whom this collection preset applies. */
      user?: (string | components["schemas"]["Users"]) | null;
      /** The unique identifier of a role in the platform. If `user` is null, this will be used to apply the collection preset or bookmark for all users in the role. */
      role?: (string | components["schemas"]["Roles"]) | null;
      /** What collection this collection preset is used for. */
      collection?: string | components["schemas"]["Collections"];
      /** Search query. */
      search?: string | null;
      /** Key of the layout that is used. */
      layout?: string;
      /** Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters. */
      layout_query?: { [key: string]: any } | null;
      /** Options of the views. The properties in here are controlled by the layout. */
      layout_options?: { [key: string]: any } | null;
      refresh_interval?: number | null;
      filter?: { [key: string]: any } | null;
      icon?: string;
      color?: string | null;
    };
    Relations: {
      /** Unique identifier for the relation. */
      id?: number;
      /** Collection that has the field that holds the foreign key. */
      many_collection?: string;
      /** Foreign key. Field that holds the primary key of the related collection. */
      many_field?: string;
      /** Collection on the _one_ side of the relationship. */
      one_collection?: string;
      /** Alias column that serves as the _one_ side of the relationship. */
      one_field?: string | null;
      one_collection_field?: string | null;
      one_allowed_collections?: string[] | null;
      /** Field on the junction table that holds the many field of the related relation. */
      junction_field?: string | null;
      sort_field?: string | null;
      one_deselect_action?: string;
    };
    Revisions: {
      /** Unique identifier for the revision. */
      id?: number;
      /** Unique identifier for the activity record. */
      activity?: number | components["schemas"]["Activity"];
      /** Collection of the updated item. */
      collection?: string | components["schemas"]["Collections"];
      /** Primary key of updated item. */
      item?: string;
      /** Copy of item state at time of update. */
      data?: { [key: string]: any } | null;
      /** Changes between the previous and the current revision. */
      delta?: { [key: string]: any };
      /** If the current item was updated relationally, this is the id of the parent revision record */
      parent?: number | null;
    };
    Roles: {
      /** Unique identifier for the role. */
      id?: string;
      /** Name of the role. */
      name?: string;
      /** The role's icon. */
      icon?: string;
      /** Description of the role. */
      description?: string | null;
      /** Array of IP addresses that are allowed to connect to the API as a user of this role. */
      ip_access?: string[];
      /** Whether or not this role enforces the use of 2FA. */
      enforce_tfa?: boolean;
      /** Admin role. If true, skips all permission checks. */
      admin_access?: boolean;
      /** The users in the role are allowed to use the app. */
      app_access?: boolean;
      users?: (string | components["schemas"]["Users"])[];
    };
    Settings: {
      /** Unique identifier for the setting. */
      id?: number;
      /** The name of the project. */
      project_name?: string;
      /** The url of the project. */
      project_url?: string | null;
      /** The brand color of the project. */
      project_color?: string | null;
      /** The logo of the project. */
      project_logo?: string | null;
      /** The foreground of the project. */
      public_foreground?: string | null;
      /** The background of the project. */
      public_background?: string | null;
      /** Note rendered on the public pages of the app. */
      public_note?: string | null;
      /** Allowed authentication login attempts before the user's status is set to blocked. */
      auth_login_attempts?: number;
      /** Authentication password policy. */
      auth_password_policy?: string | null;
      /** What transformations are allowed in the assets endpoint. */
      storage_asset_transform?: ("all" | "none" | "presets") | null;
      /** Array of allowed */
      storage_asset_presets?:
        | {
            /** Key for the asset. Used in the assets endpoint. */
            key?: string;
            /** Whether to crop the thumbnail to match the size, or maintain the aspect ratio. */
            fit?: "cover" | "contain" | "inside" | "outside";
            /** Width of the thumbnail. */
            width?: number;
            /** Height of the thumbnail. */
            height?: number;
            /** No image upscale */
            withoutEnlargement?: boolean;
            /** Quality of the compression used. */
            quality?: number;
            /** Reformat output image */
            format?: "" | "jpeg" | "png" | "webp" | "tiff";
            /** Additional transformations to apply */
            transforms?:
              | {
                  /** The Sharp method name */
                  method?: string;
                  /** A list of arguments to pass to the Sharp method */
                  arguments?:
                    | {
                        /** A JSON representation of the argument value */
                        argument?: string;
                      }[]
                    | null;
                }[]
              | null;
          }[]
        | null;
      custom_css?: string | null;
      /** Default folder to place files */
      storage_default_folder?: string;
      basemaps?: { [key: string]: any } | null;
      mapbox_key?: string | null;
      module_bar?: { [key: string]: any } | null;
      project_descriptor?: string | null;
      translation_strings?: { [key: string]: any } | null;
      default_language?: string;
      custom_aspect_ratios?: { [key: string]: any } | null;
      branding_divider?: string;
      modules_divider?: string;
      security_divider?: string;
      files_divider?: string;
      map_divider?: string;
      image_editor?: string;
    };
    Users: {
      /** Unique identifier for the user. */
      id?: string;
      /** First name of the user. */
      first_name?: string;
      /** Last name of the user. */
      last_name?: string;
      /** Unique email address for the user. */
      email?: string;
      /** Password of the user. */
      password?: string;
      /** The user's location. */
      location?: string | null;
      /** The user's title. */
      title?: string | null;
      /** The user's description. */
      description?: string | null;
      /** The user's tags. */
      tags?: string[] | null;
      /** The user's avatar. */
      avatar?: (string | components["schemas"]["Files"]) | null;
      /** The user's language used in Directus. */
      language?: string;
      /** What theme the user is using. */
      theme?: "light" | "dark" | "auto";
      /** The 2FA secret string that's used to generate one time passwords. */
      tfa_secret?: string | null;
      /** Status of the user. */
      status?: "active" | "invited" | "draft" | "suspended" | "deleted";
      /** Unique identifier of the role of this user. */
      role?: string | components["schemas"]["Roles"];
      /** Static token for the user. */
      token?: string | null;
      last_access?: string | null;
      /** Last page that the user was on. */
      last_page?: string | null;
      provider?: string;
      external_identifier?: string | null;
      auth_data?: { [key: string]: any } | null;
      email_notifications?: boolean | null;
      eCommercePurchases?: (
        | string
        | components["schemas"]["ItemsECommercePurchases"]
      )[];
      executions?: (string | components["schemas"]["ItemsExecutions"])[];
      institutionUsers?: (
        | string
        | components["schemas"]["ItemsInstitutionUsers"]
      )[];
      licenses?: (string | components["schemas"]["ItemsLicenses"])[];
      participants?: (string | components["schemas"]["ItemsParticipants"])[];
      preferences_divider?: string;
      admin_divider?: string;
    };
    Webhooks: {
      /** The index of the webhook. */
      id?: number;
      /** The name of the webhook. */
      name?: string;
      /** Method used in the webhook. */
      method?: string;
      /** The url of the webhook. */
      url?: string | null;
      /** The status of the webhook. */
      status?: string;
      /** If yes, send the content of what was done */
      data?: boolean;
      /** The actions that triggers this webhook. */
      actions?: string[] | null;
      collections?: string[];
      headers?: { [key: string]: any } | null;
      triggers_divider?: string;
    };
    Flows: {
      /** Unique identifier for the flow. */
      id?: string;
      /** The name of the flow. */
      name?: string;
      /** Icon displayed in the Admin App for the flow. */
      icon?: string;
      /** Color of the icon displayed in the Admin App for the flow. */
      color?: string | null;
      description?: string | null;
      /** Current status of the flow. */
      status?: "active" | "inactive";
      /** Type of trigger for the flow. One of `hook`, `webhook`, `operation`, `schedule`, `manual`. */
      trigger?: string;
      /** The permission used during the flow. One of `$public`, `$trigger`, `$full`, or UUID of a role. */
      accountability?: string;
      /** Options of the selected trigger for the flow. */
      options?: { [key: string]: any } | null;
      /** UUID of the operation connected to the trigger in the flow. */
      operation?: string | components["schemas"]["Operations"];
      /** Timestamp in ISO8601 when the flow was created. */
      date_created?: string | null;
      /** The user who created the flow. */
      user_created?: string | components["schemas"]["Users"];
      operations?: (string | components["schemas"]["Operations"])[];
    };
    Operations: {
      /** Unique identifier for the operation. */
      id?: string;
      /** The name of the operation. */
      name?: string;
      /** Key for the operation. Must be unique within a given flow. */
      key?: string;
      /** Type of operation. One of `log`, `mail`, `notification`, `create`, `read`, `request`, `sleep`, `transform`, `trigger`, `condition`, or any type of custom operation extensions. */
      type?: string;
      /** Position of the operation on the X axis within the flow workspace. */
      position_x?: number;
      /** Position of the operation on the Y axis within the flow workspace. */
      position_y?: number;
      /** Options depending on the type of the operation. */
      options?: { [key: string]: any } | null;
      /** The operation triggered when the current operation succeeds (or `then` logic of a condition operation). */
      resolve?: string | components["schemas"]["Operations"];
      /** The operation triggered when the current operation fails (or `otherwise` logic of a condition operation). */
      reject?: string | components["schemas"]["Operations"];
      flow?: string | components["schemas"]["Flows"];
      /** Timestamp in ISO8601 when the operation was created. */
      date_created?: string | null;
      /** The user who created the operation. */
      user_created?: string | components["schemas"]["Users"];
    };
  };
  responses: {
    /** Error: Not found. */
    NotFoundError: {
      content: {
        "application/json": {
          error?: {
            code?: number;
            message?: string;
          };
        };
      };
    };
    /** Error: Unauthorized request */
    UnauthorizedError: {
      content: {
        "application/json": {
          error?: {
            code?: number;
            message?: string;
          };
        };
      };
    };
  };
  parameters: {
    /** Index */
    Id: number;
    /** Unique identifier for the object. */
    UUId: string;
    /** Collection of which you want to retrieve the items from. */
    Collection: string;
    /** Filter by items that contain the given search query in one of their fields. */
    Search: string;
    /** Cursor for use in pagination. Often used in combination with limit. */
    Page: number;
    /** How many items to skip when fetching data. */
    Offset: number;
    /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
    Sort: string[];
    /** What metadata to return in the response. */
    Meta: string;
    /** A limit on the number of objects that are returned. */
    Limit: number;
    /** Select items in collection by given conditions. */
    Filter: string[];
    /** Control what fields are being returned in the object. */
    Fields: string[];
    /** Controls if the API sets a cookie or returns a JWT on successful login. */
    Mode: "jwt" | "cookie";
  };
}

export type Collections = {
  admin: components["schemas"]["ItemsAdmin"];
  branches: components["schemas"]["ItemsBranches"];
  catalog: components["schemas"]["ItemsCatalog"];
  cataloging: components["schemas"]["ItemsCataloging"];
  collections: components["schemas"]["ItemsCollections"];
  collections_productVariants: components["schemas"]["ItemsCollectionsProductVariants"];
  collections_publishers: components["schemas"]["ItemsCollectionsPublishers"];
  collections_tags: components["schemas"]["ItemsCollectionsTags"];
  config: components["schemas"]["ItemsConfig"];
  drm: components["schemas"]["ItemsDrm"];
  eCommerceLites: components["schemas"]["ItemsECommerceLites"];
  eCommercePurchases: components["schemas"]["ItemsECommercePurchases"];
  ecommerce: components["schemas"]["ItemsEcommerce"];
  executions: components["schemas"]["ItemsExecutions"];
  institutionUsers: components["schemas"]["ItemsInstitutionUsers"];
  institutions: components["schemas"]["ItemsInstitutions"];
  institutions_files: components["schemas"]["ItemsInstitutionsFiles"];
  licenseCollections: components["schemas"]["ItemsLicenseCollections"];
  licenseContents: components["schemas"]["ItemsLicenseContents"];
  licenses: components["schemas"]["ItemsLicenses"];
  participants: components["schemas"]["ItemsParticipants"];
  processes: components["schemas"]["ItemsProcesses"];
  productCategories: components["schemas"]["ItemsProductCategories"];
  productCategories_translations: components["schemas"]["ItemsProductCategoriesTranslations"];
  productTypes: components["schemas"]["ItemsProductTypes"];
  productVariants: components["schemas"]["ItemsProductVariants"];
  productVariants_translations: components["schemas"]["ItemsProductVariantsTranslations"];
  products: components["schemas"]["ItemsProducts"];
  productsParticipants: components["schemas"]["ItemsProductsParticipants"];
  products_tags: components["schemas"]["ItemsProductsTags"];
  products_translations: components["schemas"]["ItemsProductsTranslations"];
  publishers: components["schemas"]["ItemsPublishers"];
  roles: components["schemas"]["ItemsRoles"];
  system: components["schemas"]["ItemsSystem"];
  tags: components["schemas"]["ItemsTags"];
  translations: components["schemas"]["ItemsTranslations"];
  treeConnections: components["schemas"]["ItemsTreeConnections"];
  viewer: components["schemas"]["ItemsViewer"];
  directus_users: components["schemas"]["Users"];
  directus_roles: components["schemas"]["Roles"];
  directus_files: components["schemas"]["Files"];
};